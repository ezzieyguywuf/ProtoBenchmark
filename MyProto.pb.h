// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MyProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MyProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MyProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyProto_2eproto;
class Attributes;
class AttributesDefaultTypeInternal;
extern AttributesDefaultTypeInternal _Attributes_default_instance_;
class MyProto;
class MyProtoDefaultTypeInternal;
extern MyProtoDefaultTypeInternal _MyProto_default_instance_;
class MyProto_MetadataEntry_DoNotUse;
class MyProto_MetadataEntry_DoNotUseDefaultTypeInternal;
extern MyProto_MetadataEntry_DoNotUseDefaultTypeInternal _MyProto_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Attributes* Arena::CreateMaybeMessage<::Attributes>(Arena*);
template<> ::MyProto* Arena::CreateMaybeMessage<::MyProto>(Arena*);
template<> ::MyProto_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::MyProto_MetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Type : int {
  TYPEI = 0,
  TYPEII = 1,
  TYPEIII = 2,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = TYPEI;
constexpr Type Type_MAX = TYPEIII;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    const std::string& name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Attributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Attributes) */ {
 public:
  inline Attributes() : Attributes(nullptr) {};
  virtual ~Attributes();

  Attributes(const Attributes& from);
  Attributes(Attributes&& from) noexcept
    : Attributes() {
    *this = ::std::move(from);
  }

  inline Attributes& operator=(const Attributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attributes& operator=(Attributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attributes* internal_default_instance() {
    return reinterpret_cast<const Attributes*>(
               &_Attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Attributes& a, Attributes& b) {
    a.Swap(&b);
  }
  inline void Swap(Attributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attributes* New() const final {
    return CreateMaybeMessage<Attributes>(nullptr);
  }

  Attributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attributes& from);
  void MergeFrom(const Attributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Attributes";
  }
  protected:
  explicit Attributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyProto_2eproto);
    return ::descriptor_table_MyProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 2,
    kMaybeBlankFieldNumber = 3,
    kAlsoMaybeBlankFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // string resource = 2;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_resource();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_resource(
      std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string maybe_blank = 3;
  void clear_maybe_blank();
  const std::string& maybe_blank() const;
  void set_maybe_blank(const std::string& value);
  void set_maybe_blank(std::string&& value);
  void set_maybe_blank(const char* value);
  void set_maybe_blank(const char* value, size_t size);
  std::string* mutable_maybe_blank();
  std::string* release_maybe_blank();
  void set_allocated_maybe_blank(std::string* maybe_blank);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_maybe_blank();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_maybe_blank(
      std::string* maybe_blank);
  private:
  const std::string& _internal_maybe_blank() const;
  void _internal_set_maybe_blank(const std::string& value);
  std::string* _internal_mutable_maybe_blank();
  public:

  // string also_maybe_blank = 4;
  void clear_also_maybe_blank();
  const std::string& also_maybe_blank() const;
  void set_also_maybe_blank(const std::string& value);
  void set_also_maybe_blank(std::string&& value);
  void set_also_maybe_blank(const char* value);
  void set_also_maybe_blank(const char* value, size_t size);
  std::string* mutable_also_maybe_blank();
  std::string* release_also_maybe_blank();
  void set_allocated_also_maybe_blank(std::string* also_maybe_blank);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_also_maybe_blank();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_also_maybe_blank(
      std::string* also_maybe_blank);
  private:
  const std::string& _internal_also_maybe_blank() const;
  void _internal_set_also_maybe_blank(const std::string& value);
  std::string* _internal_mutable_also_maybe_blank();
  public:

  // .Type type = 1;
  void clear_type();
  ::Type type() const;
  void set_type(::Type value);
  private:
  ::Type _internal_type() const;
  void _internal_set_type(::Type value);
  public:

  // @@protoc_insertion_point(class_scope:Attributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maybe_blank_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr also_maybe_blank_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProto_2eproto;
};
// -------------------------------------------------------------------

class MyProto_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MyProto_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MyProto_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  MyProto_MetadataEntry_DoNotUse();
  MyProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MyProto_MetadataEntry_DoNotUse& other);
  static const MyProto_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MyProto_MetadataEntry_DoNotUse*>(&_MyProto_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MyProto.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MyProto.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyProto_2eproto);
    return ::descriptor_table_MyProto_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class MyProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyProto) */ {
 public:
  inline MyProto() : MyProto(nullptr) {};
  virtual ~MyProto();

  MyProto(const MyProto& from);
  MyProto(MyProto&& from) noexcept
    : MyProto() {
    *this = ::std::move(from);
  }

  inline MyProto& operator=(const MyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyProto& operator=(MyProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyProto* internal_default_instance() {
    return reinterpret_cast<const MyProto*>(
               &_MyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MyProto& a, MyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MyProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyProto* New() const final {
    return CreateMaybeMessage<MyProto>(nullptr);
  }

  MyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyProto& from);
  void MergeFrom(const MyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyProto";
  }
  protected:
  explicit MyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyProto_2eproto);
    return ::descriptor_table_MyProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kAttributesFieldNumber = 4,
    kUidFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // .Attributes attributes = 4;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::Attributes& attributes() const;
  ::Attributes* release_attributes();
  ::Attributes* mutable_attributes();
  void set_allocated_attributes(::Attributes* attributes);
  private:
  const ::Attributes& _internal_attributes() const;
  ::Attributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::Attributes* attributes);
  ::Attributes* unsafe_arena_release_attributes();

  // int64 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MyProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MyProto_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::Attributes* attributes_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Attributes

// .Type type = 1;
inline void Attributes::clear_type() {
  type_ = 0;
}
inline ::Type Attributes::_internal_type() const {
  return static_cast< ::Type >(type_);
}
inline ::Type Attributes::type() const {
  // @@protoc_insertion_point(field_get:Attributes.type)
  return _internal_type();
}
inline void Attributes::_internal_set_type(::Type value) {
  
  type_ = value;
}
inline void Attributes::set_type(::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Attributes.type)
}

// string resource = 2;
inline void Attributes::clear_resource() {
  resource_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Attributes::resource() const {
  // @@protoc_insertion_point(field_get:Attributes.resource)
  return _internal_resource();
}
inline void Attributes::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:Attributes.resource)
}
inline std::string* Attributes::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:Attributes.resource)
  return _internal_mutable_resource();
}
inline const std::string& Attributes::_internal_resource() const {
  return resource_.Get();
}
inline void Attributes::_internal_set_resource(const std::string& value) {
  
  resource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Attributes::set_resource(std::string&& value) {
  
  resource_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Attributes.resource)
}
inline void Attributes::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Attributes.resource)
}
inline void Attributes::set_resource(const char* value,
    size_t size) {
  
  resource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Attributes.resource)
}
inline std::string* Attributes::_internal_mutable_resource() {
  
  return resource_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Attributes::release_resource() {
  // @@protoc_insertion_point(field_release:Attributes.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attributes::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Attributes.resource)
}
inline std::string* Attributes::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Attributes.resource)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return resource_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attributes::unsafe_arena_set_allocated_resource(
    std::string* resource) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      resource, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Attributes.resource)
}

// string maybe_blank = 3;
inline void Attributes::clear_maybe_blank() {
  maybe_blank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Attributes::maybe_blank() const {
  // @@protoc_insertion_point(field_get:Attributes.maybe_blank)
  return _internal_maybe_blank();
}
inline void Attributes::set_maybe_blank(const std::string& value) {
  _internal_set_maybe_blank(value);
  // @@protoc_insertion_point(field_set:Attributes.maybe_blank)
}
inline std::string* Attributes::mutable_maybe_blank() {
  // @@protoc_insertion_point(field_mutable:Attributes.maybe_blank)
  return _internal_mutable_maybe_blank();
}
inline const std::string& Attributes::_internal_maybe_blank() const {
  return maybe_blank_.Get();
}
inline void Attributes::_internal_set_maybe_blank(const std::string& value) {
  
  maybe_blank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Attributes::set_maybe_blank(std::string&& value) {
  
  maybe_blank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Attributes.maybe_blank)
}
inline void Attributes::set_maybe_blank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maybe_blank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Attributes.maybe_blank)
}
inline void Attributes::set_maybe_blank(const char* value,
    size_t size) {
  
  maybe_blank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Attributes.maybe_blank)
}
inline std::string* Attributes::_internal_mutable_maybe_blank() {
  
  return maybe_blank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Attributes::release_maybe_blank() {
  // @@protoc_insertion_point(field_release:Attributes.maybe_blank)
  return maybe_blank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attributes::set_allocated_maybe_blank(std::string* maybe_blank) {
  if (maybe_blank != nullptr) {
    
  } else {
    
  }
  maybe_blank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maybe_blank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Attributes.maybe_blank)
}
inline std::string* Attributes::unsafe_arena_release_maybe_blank() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Attributes.maybe_blank)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return maybe_blank_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attributes::unsafe_arena_set_allocated_maybe_blank(
    std::string* maybe_blank) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (maybe_blank != nullptr) {
    
  } else {
    
  }
  maybe_blank_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      maybe_blank, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Attributes.maybe_blank)
}

// string also_maybe_blank = 4;
inline void Attributes::clear_also_maybe_blank() {
  also_maybe_blank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Attributes::also_maybe_blank() const {
  // @@protoc_insertion_point(field_get:Attributes.also_maybe_blank)
  return _internal_also_maybe_blank();
}
inline void Attributes::set_also_maybe_blank(const std::string& value) {
  _internal_set_also_maybe_blank(value);
  // @@protoc_insertion_point(field_set:Attributes.also_maybe_blank)
}
inline std::string* Attributes::mutable_also_maybe_blank() {
  // @@protoc_insertion_point(field_mutable:Attributes.also_maybe_blank)
  return _internal_mutable_also_maybe_blank();
}
inline const std::string& Attributes::_internal_also_maybe_blank() const {
  return also_maybe_blank_.Get();
}
inline void Attributes::_internal_set_also_maybe_blank(const std::string& value) {
  
  also_maybe_blank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Attributes::set_also_maybe_blank(std::string&& value) {
  
  also_maybe_blank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Attributes.also_maybe_blank)
}
inline void Attributes::set_also_maybe_blank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  also_maybe_blank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Attributes.also_maybe_blank)
}
inline void Attributes::set_also_maybe_blank(const char* value,
    size_t size) {
  
  also_maybe_blank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Attributes.also_maybe_blank)
}
inline std::string* Attributes::_internal_mutable_also_maybe_blank() {
  
  return also_maybe_blank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Attributes::release_also_maybe_blank() {
  // @@protoc_insertion_point(field_release:Attributes.also_maybe_blank)
  return also_maybe_blank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attributes::set_allocated_also_maybe_blank(std::string* also_maybe_blank) {
  if (also_maybe_blank != nullptr) {
    
  } else {
    
  }
  also_maybe_blank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), also_maybe_blank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Attributes.also_maybe_blank)
}
inline std::string* Attributes::unsafe_arena_release_also_maybe_blank() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Attributes.also_maybe_blank)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return also_maybe_blank_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attributes::unsafe_arena_set_allocated_also_maybe_blank(
    std::string* also_maybe_blank) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (also_maybe_blank != nullptr) {
    
  } else {
    
  }
  also_maybe_blank_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      also_maybe_blank, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Attributes.also_maybe_blank)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MyProto

// int64 uid = 1;
inline void MyProto::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MyProto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MyProto::uid() const {
  // @@protoc_insertion_point(field_get:MyProto.uid)
  return _internal_uid();
}
inline void MyProto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
}
inline void MyProto::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:MyProto.uid)
}

// int64 timestamp = 2;
inline void MyProto::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MyProto::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MyProto::timestamp() const {
  // @@protoc_insertion_point(field_get:MyProto.timestamp)
  return _internal_timestamp();
}
inline void MyProto::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void MyProto::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:MyProto.timestamp)
}

// map<string, string> metadata = 3;
inline int MyProto::_internal_metadata_size() const {
  return metadata_.size();
}
inline int MyProto::metadata_size() const {
  return _internal_metadata_size();
}
inline void MyProto::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MyProto::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MyProto::metadata() const {
  // @@protoc_insertion_point(field_map:MyProto.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MyProto::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MyProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:MyProto.metadata)
  return _internal_mutable_metadata();
}

// .Attributes attributes = 4;
inline bool MyProto::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool MyProto::has_attributes() const {
  return _internal_has_attributes();
}
inline void MyProto::clear_attributes() {
  if (GetArena() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::Attributes& MyProto::_internal_attributes() const {
  const ::Attributes* p = attributes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Attributes*>(
      &::_Attributes_default_instance_);
}
inline const ::Attributes& MyProto::attributes() const {
  // @@protoc_insertion_point(field_get:MyProto.attributes)
  return _internal_attributes();
}
inline void MyProto::unsafe_arena_set_allocated_attributes(
    ::Attributes* attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyProto.attributes)
}
inline ::Attributes* MyProto::release_attributes() {
  auto temp = unsafe_arena_release_attributes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Attributes* MyProto::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:MyProto.attributes)
  
  ::Attributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::Attributes* MyProto::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::Attributes>(GetArena());
    attributes_ = p;
  }
  return attributes_;
}
inline ::Attributes* MyProto::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:MyProto.attributes)
  return _internal_mutable_attributes();
}
inline void MyProto::set_allocated_attributes(::Attributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:MyProto.attributes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Type>() {
  return ::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MyProto_2eproto
